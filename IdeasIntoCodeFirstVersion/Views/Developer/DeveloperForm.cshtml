@model IdeasIntoCodeFirstVersion.Models.Developer

@{
    ViewBag.Title = "View";
}

<h2>View</h2>


@using (Html.BeginForm("Edit", "Developer", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Developer</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group row">
        @Html.LabelFor(model => model.User.LastName, htmlAttributes: new { @class = "col-sm-2 col-form-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.User.LastName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.User.LastName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.User.Name, htmlAttributes: new { @class = "col-sm-2 col-form-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.User.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.User.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "col-sm-2 col-form-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.User.Email, htmlAttributes: new { @class = "col-sm-2 col-form-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.User.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.User.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.GitHub, htmlAttributes: new { @class = "col-sm-2 col-form-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.GitHub, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.GitHub, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group row">
        @Html.LabelFor(model => model.Picture, htmlAttributes: new { @class = "col-sm-2 col-form-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.ProfilePicture, new { Type = "File" })
           @*// @Html.ValidationMessageFor(model => model.Developer.GitHub, "", new { @class = "text-danger" })*@
        </div>
    </div>

    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Programming Languages</label>
        <div class="col-md-8">
            <input id="selectprogramminglanguages" name="programminglanguages" type="text" value="" class="typeahead form-control" />
            <ul class="col-md-offset-2 col-md-10 list-group" id="selectedprogramminglanguages">
                @foreach (var programmingLanguage in Model.ProgrammingLanguages)
                {
                    <li class='list-group-item d-flex justify-content-between align-items-center'>
                        <input type='hidden' name='programmingLanguage' value=@programmingLanguage.ID />
                        @programmingLanguage.Name<button type="button" style="background-color:red" class="deletebutton" onclick="removeParentElement()"></button>
                    </li>
                }
            </ul>
        </div>
    </div>

    @Html.HiddenFor(model => model.ID)

    <div class="form-group">
        <input type="submit" value="Create" class="btn btn-danger" />
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")


    <script>
        $(document).ready(function () {

            var programmingLanguages = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                prefetch: '/api/programminglanguages'
            });

            $('#selectprogramminglanguages').typeahead({
                minLength: 1,
                highlight: true
            },
                {
                    name: 'programmingLanguages',
                    display: 'name',
                    source: programmingLanguages
                }).on("typeahead:select", function (e, programminglanguage) {

                    $("#selectedprogramminglanguages").append("<li class='list-group-item d-flex justify-content-between align-items-center'><input type='hidden' name='programmingLanguage' value='"
                        + programminglanguage.id + "' /> " + programminglanguage.name +
                        '<button type="button" style="background-color:red" class="deletebutton" onclick="removeParentElement()"></button></li>')
                });
        })



        $('input:text').click(
            function () {
                $(this).val('');
            });


    </script>

}
